/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreatorTokenInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyNewTokens()": FunctionFragment;
    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "calculateSaleReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "calculateTokenBuyReturns(uint256)": FunctionFragment;
    "changeFounderPercentage(uint8)": FunctionFragment;
    "checkAndReturnInitialContractBalance(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "founderPercentage()": FunctionFragment;
    "getEthBalance()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveBalance()": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "sellTokensForEth(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyNewTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenBuyReturns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFounderPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndReturnInitialContractBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "founderPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokensForEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyNewTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenBuyReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFounderPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndReturnInitialContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "founderPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokensForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burned(address,uint256,uint256)": EventFragment;
    "Minted(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class CreatorToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreatorTokenInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buyNewTokens(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "buyNewTokens()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateTokenBuyReturns(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTokenBuyReturns(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    changeFounderPercentage(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeFounderPercentage(uint8)"(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkAndReturnInitialContractBalance(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToUseAsTokenBalance: BigNumber;
      0: BigNumber;
    }>;

    "checkAndReturnInitialContractBalance(uint256,uint256)"(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountToUseAsTokenBalance: BigNumber;
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    founderPercentage(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "founderPercentage()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    getEthBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getEthBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reserveBalance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reserveBalance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    reserveRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    sellTokensForEth(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellTokensForEth(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyNewTokens(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "buyNewTokens()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  calculatePurchaseReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSaleReturn(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
    _supply: BigNumberish,
    _connectorBalance: BigNumberish,
    _connectorWeight: BigNumberish,
    _sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenBuyReturns(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "calculateTokenBuyReturns(uint256)"(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  changeFounderPercentage(
    _newPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeFounderPercentage(uint8)"(
    _newPercentage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkAndReturnInitialContractBalance(
    _amountToDeposit: BigNumberish,
    balanceToCheckAgainst: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "checkAndReturnInitialContractBalance(uint256,uint256)"(
    _amountToDeposit: BigNumberish,
    balanceToCheckAgainst: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  founderPercentage(overrides?: CallOverrides): Promise<number>;

  "founderPercentage()"(overrides?: CallOverrides): Promise<number>;

  getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getEthBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "reserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  sellTokensForEth(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellTokensForEth(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyNewTokens(overrides?: CallOverrides): Promise<void>;

    "buyNewTokens()"(overrides?: CallOverrides): Promise<void>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenBuyReturns(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "calculateTokenBuyReturns(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    changeFounderPercentage(
      _newPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFounderPercentage(uint8)"(
      _newPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAndReturnInitialContractBalance(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkAndReturnInitialContractBalance(uint256,uint256)"(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    founderPercentage(overrides?: CallOverrides): Promise<number>;

    "founderPercentage()"(overrides?: CallOverrides): Promise<number>;

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getEthBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellTokensForEth(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sellTokensForEth(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Burned(_To: null, _amountMinted: null, _amountDeposited: null): EventFilter;

    Minted(
      buyer: null,
      deposited: null,
      amountMinted: null,
      amountDistributedToBuyer: null,
      amountDistributedToOwner: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyNewTokens(overrides?: PayableOverrides): Promise<BigNumber>;

    "buyNewTokens()"(overrides?: PayableOverrides): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenBuyReturns(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateTokenBuyReturns(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFounderPercentage(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeFounderPercentage(uint8)"(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkAndReturnInitialContractBalance(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkAndReturnInitialContractBalance(uint256,uint256)"(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    founderPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "founderPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getEthBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reserveBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    sellTokensForEth(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellTokensForEth(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyNewTokens(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "buyNewTokens()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSaleReturn(uint256,uint256,uint32,uint256)"(
      _supply: BigNumberish,
      _connectorBalance: BigNumberish,
      _connectorWeight: BigNumberish,
      _sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenBuyReturns(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateTokenBuyReturns(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFounderPercentage(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeFounderPercentage(uint8)"(
      _newPercentage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkAndReturnInitialContractBalance(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkAndReturnInitialContractBalance(uint256,uint256)"(
      _amountToDeposit: BigNumberish,
      balanceToCheckAgainst: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    founderPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "founderPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEthBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reserveBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserveRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTokensForEth(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellTokensForEth(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
