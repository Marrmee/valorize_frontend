/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimedMintTokenInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimTokens(uint256,bytes32[])": FunctionFragment;
    "completeAirdrop()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getAirdropInfo(uint256)": FunctionFragment;
    "getInitialSupply()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialSupply()": FunctionFragment;
    "isClaimed(uint256,uint256)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintCap()": FunctionFragment;
    "minter()": FunctionFragment;
    "name()": FunctionFragment;
    "newAirdrop(bytes32,uint256)": FunctionFragment;
    "nextAllowedMintTime()": FunctionFragment;
    "numberOfAirdrops()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMintGuard(uint256,uint256)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "supplyCap()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "sweepTokens(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeDelay()": FunctionFragment;
    "timeDelayActive()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "updateVault(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "completeAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mintCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newAirdrop",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAllowedMintTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfAirdrops",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintGuard",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "supplyCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "sweepTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "timeDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeDelayActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateVault", values: [string]): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAirdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextAllowedMintTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfAirdrops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintGuard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timeDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeDelayActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AirdropComplete(uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Claimed(address,uint256)": EventFragment;
    "MinterUpdated(address,address)": EventFragment;
    "NewAirdrop(uint256,bytes32,uint256)": EventFragment;
    "NewMintGuard(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Sweep(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAirdrop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMintGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUpdated"): EventFragment;
}

export class TimedMintToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimedMintTokenInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimTokens(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimTokens(uint256,bytes32[])"(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    completeAirdrop(overrides?: Overrides): Promise<ContractTransaction>;

    "completeAirdrop()"(overrides?: Overrides): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAirdropInfo(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      root: string;
      claimPeriodEnds: BigNumber;
      isComplete: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    "getAirdropInfo(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      root: string;
      claimPeriodEnds: BigNumber;
      isComplete: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    getInitialSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getInitialSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "initialSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isClaimed(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isClaimed(uint256,uint256)"(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mint(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintCap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "mintCap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minter(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "minter()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    newAirdrop(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newAirdrop(bytes32,uint256)"(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nextAllowedMintTime(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nextAllowedMintTime()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    numberOfAirdrops(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "numberOfAirdrops()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMintGuard(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMintGuard(uint256,uint256)"(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinter(address)"(
      newMinter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supplyCap(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "supplyCap()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    sweepTokens(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sweepTokens(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    timeDelay(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "timeDelay()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    timeDelayActive(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "timeDelayActive()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "vault()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimTokens(
    claimAmount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimTokens(uint256,bytes32[])"(
    claimAmount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  completeAirdrop(overrides?: Overrides): Promise<ContractTransaction>;

  "completeAirdrop()"(overrides?: Overrides): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAirdropInfo(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    root: string;
    claimPeriodEnds: BigNumber;
    isComplete: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  "getAirdropInfo(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    root: string;
    claimPeriodEnds: BigNumber;
    isComplete: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  getInitialSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "initialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  isClaimed(
    airdropIndex: BigNumberish,
    claimIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isClaimed(uint256,uint256)"(
    airdropIndex: BigNumberish,
    claimIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintCap(overrides?: CallOverrides): Promise<BigNumber>;

  "mintCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  newAirdrop(
    _merkleRoot: BytesLike,
    _timeLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newAirdrop(bytes32,uint256)"(
    _merkleRoot: BytesLike,
    _timeLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nextAllowedMintTime(overrides?: CallOverrides): Promise<BigNumber>;

  "nextAllowedMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfAirdrops(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfAirdrops()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMintGuard(
    _timeDelay: BigNumberish,
    _mintCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMintGuard(uint256,uint256)"(
    _timeDelay: BigNumberish,
    _mintCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinter(
    newMinter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinter(address)"(
    newMinter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

  "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sweepTokens(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sweepTokens(address)"(
    _destination: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  timeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "timeDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  timeDelayActive(overrides?: CallOverrides): Promise<boolean>;

  "timeDelayActive()"(overrides?: CallOverrides): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateVault(address)"(
    _vault: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokens(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTokens(uint256,bytes32[])"(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    completeAirdrop(overrides?: CallOverrides): Promise<void>;

    "completeAirdrop()"(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAirdropInfo(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      root: string;
      claimPeriodEnds: BigNumber;
      isComplete: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    "getAirdropInfo(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      root: string;
      claimPeriodEnds: BigNumber;
      isComplete: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    getInitialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "initialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isClaimed(uint256,uint256)"(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintCap(overrides?: CallOverrides): Promise<BigNumber>;

    "mintCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    newAirdrop(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newAirdrop(bytes32,uint256)"(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextAllowedMintTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAllowedMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAirdrops(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAirdrops()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintGuard(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMintGuard(uint256,uint256)"(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(newMinter: string, overrides?: CallOverrides): Promise<void>;

    "setMinter(address)"(
      newMinter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sweepTokens(_destination: string, overrides?: CallOverrides): Promise<void>;

    "sweepTokens(address)"(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    timeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "timeDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeDelayActive(overrides?: CallOverrides): Promise<boolean>;

    "timeDelayActive()"(overrides?: CallOverrides): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    "updateVault(address)"(
      _vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AirdropComplete(index: null): EventFilter;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Claimed(claimant: null, amount: null): EventFilter;

    MinterUpdated(oldMinter: null, newMinter: null): EventFilter;

    NewAirdrop(index: null, merkleRoot: null, claimPeriod: null): EventFilter;

    NewMintGuard(nextAllowedMintTime: null, maxMintAmount: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Sweep(destination: null, amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    VaultUpdated(oldVault: null, newVault: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokens(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimTokens(uint256,bytes32[])"(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    completeAirdrop(overrides?: Overrides): Promise<BigNumber>;

    "completeAirdrop()"(overrides?: Overrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAirdropInfo(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAirdropInfo(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "initialSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimed(uint256,uint256)"(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mint(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintCap(overrides?: CallOverrides): Promise<BigNumber>;

    "mintCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    newAirdrop(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newAirdrop(bytes32,uint256)"(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nextAllowedMintTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAllowedMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAirdrops(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfAirdrops()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMintGuard(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMintGuard(uint256,uint256)"(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinter(newMinter: string, overrides?: Overrides): Promise<BigNumber>;

    "setMinter(address)"(
      newMinter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supplyCap(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyCap()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweepTokens(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sweepTokens(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "timeDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    timeDelayActive(overrides?: CallOverrides): Promise<BigNumber>;

    "timeDelayActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateVault(_vault: string, overrides?: Overrides): Promise<BigNumber>;

    "updateVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokens(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimTokens(uint256,bytes32[])"(
      claimAmount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    completeAirdrop(overrides?: Overrides): Promise<PopulatedTransaction>;

    "completeAirdrop()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAirdropInfo(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAirdropInfo(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimed(uint256,uint256)"(
      airdropIndex: BigNumberish,
      claimIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAirdrop(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newAirdrop(bytes32,uint256)"(
      _merkleRoot: BytesLike,
      _timeLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nextAllowedMintTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextAllowedMintTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfAirdrops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfAirdrops()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMintGuard(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMintGuard(uint256,uint256)"(
      _timeDelay: BigNumberish,
      _mintCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinter(
      newMinter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinter(address)"(
      newMinter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supplyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supplyCap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepTokens(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sweepTokens(address)"(
      _destination: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeDelayActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timeDelayActive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateVault(address)"(
      _vault: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
