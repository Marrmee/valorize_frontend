/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DeployerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "deployContract(string,bytes,bytes,bytes32)": FunctionFragment;
    "discontinueContract(string)": FunctionFragment;
    "getContractByteCodeHash(string)": FunctionFragment;
    "getDeployed(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setContractByteCode(string,bytes,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateContractPrice(string,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values: [string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "discontinueContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractByteCodeHash",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getDeployed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractByteCode",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discontinueContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractByteCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractByteCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ByteCodeUploaded(string,uint256,bytes32)": EventFragment;
    "ContractDeployed(address,string,uint256)": EventFragment;
    "ContractDiscontinued(string)": EventFragment;
    "PriceUpdated(string,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ByteCodeUploaded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractDiscontinued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Deployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DeployerInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    deployContract(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployContract(string,bytes,bytes,bytes32)"(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    discontinueContract(
      contractKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "discontinueContract(string)"(
      contractKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getContractByteCodeHash(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      contractParams: {
        byteCodeHash: string;
        price: BigNumber;
        0: string;
        1: BigNumber;
      };
      0: boolean;
      1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
    }>;

    "getContractByteCodeHash(string)"(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      contractParams: {
        byteCodeHash: string;
        price: BigNumber;
        0: string;
        1: BigNumber;
      };
      0: boolean;
      1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
    }>;

    getDeployed(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<{
      contractsDeployed: {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[];
      0: {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[];
    }>;

    "getDeployed(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<{
      contractsDeployed: {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[];
      0: {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[];
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContractByteCode(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContractByteCode(string,bytes,uint256)"(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updateContractPrice(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateContractPrice(string,uint256)"(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  deployContract(
    contractType: string,
    bytecode: BytesLike,
    params: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployContract(string,bytes,bytes,bytes32)"(
    contractType: string,
    bytecode: BytesLike,
    params: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  discontinueContract(
    contractKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "discontinueContract(string)"(
    contractKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getContractByteCodeHash(
    contractKey: string,
    overrides?: CallOverrides
  ): Promise<{
    success: boolean;
    contractParams: {
      byteCodeHash: string;
      price: BigNumber;
      0: string;
      1: BigNumber;
    };
    0: boolean;
    1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
  }>;

  "getContractByteCodeHash(string)"(
    contractKey: string,
    overrides?: CallOverrides
  ): Promise<{
    success: boolean;
    contractParams: {
      byteCodeHash: string;
      price: BigNumber;
      0: string;
      1: BigNumber;
    };
    0: boolean;
    1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
  }>;

  getDeployed(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<
    { deploymentAddress: string; contractType: string; 0: string; 1: string }[]
  >;

  "getDeployed(address)"(
    deployer: string,
    overrides?: CallOverrides
  ): Promise<
    { deploymentAddress: string; contractType: string; 0: string; 1: string }[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContractByteCode(
    contractKey: string,
    byteCode: BytesLike,
    contractDeployPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContractByteCode(string,bytes,uint256)"(
    contractKey: string,
    byteCode: BytesLike,
    contractDeployPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateContractPrice(
    contractKey: string,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateContractPrice(string,uint256)"(
    contractKey: string,
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    deployContract(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployContract(string,bytes,bytes,bytes32)"(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    discontinueContract(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "discontinueContract(string)"(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractByteCodeHash(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      contractParams: {
        byteCodeHash: string;
        price: BigNumber;
        0: string;
        1: BigNumber;
      };
      0: boolean;
      1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
    }>;

    "getContractByteCodeHash(string)"(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      contractParams: {
        byteCodeHash: string;
        price: BigNumber;
        0: string;
        1: BigNumber;
      };
      0: boolean;
      1: { byteCodeHash: string; price: BigNumber; 0: string; 1: BigNumber };
    }>;

    getDeployed(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<
      {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[]
    >;

    "getDeployed(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<
      {
        deploymentAddress: string;
        contractType: string;
        0: string;
        1: string;
      }[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractByteCode(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractByteCode(string,bytes,uint256)"(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateContractPrice(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateContractPrice(string,uint256)"(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ByteCodeUploaded(key: null, price: null, byteCodeHash: null): EventFilter;

    ContractDeployed(
      contractAddress: null,
      contractType: null,
      paid: null
    ): EventFilter;

    ContractDiscontinued(key: null): EventFilter;

    PriceUpdated(key: null, newPrice: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployContract(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployContract(string,bytes,bytes,bytes32)"(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    discontinueContract(
      contractKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "discontinueContract(string)"(
      contractKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getContractByteCodeHash(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContractByteCodeHash(string)"(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployed(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeployed(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContractByteCode(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContractByteCode(string,bytes,uint256)"(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateContractPrice(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateContractPrice(string,uint256)"(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployContract(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployContract(string,bytes,bytes,bytes32)"(
      contractType: string,
      bytecode: BytesLike,
      params: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    discontinueContract(
      contractKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "discontinueContract(string)"(
      contractKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getContractByteCodeHash(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContractByteCodeHash(string)"(
      contractKey: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployed(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeployed(address)"(
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContractByteCode(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContractByteCode(string,bytes,uint256)"(
      contractKey: string,
      byteCode: BytesLike,
      contractDeployPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateContractPrice(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateContractPrice(string,uint256)"(
      contractKey: string,
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
